pipeline {
    agent any // Use any available Jenkins agent

    triggers {
        // Trigger job execution via a POST request with specific payload
        curl(
            url: "${env.JENKINS_URL}/job/${JOB_NAME}/build",
            method: 'POST',
            credentialsId: 'curl-trigger-credentials', // Secured credentials for curl request
            body: '{ "token": "${env.CURL_TRIGGER_TOKEN}" }', // Payload with authentication token
            customHeaders: [[name: 'Content-Type', value: 'application/json']]
        )
    }

    environment {
        // Replace with your actual Docker Hub credentials (encrypted)
        DOCKER_USERNAME = credentials('ethanyadan').username
        DOCKER_PASSWORD = credentials('docker-hub-credentials').password

        // Replace with your desired Docker Hub repository name
        DOCKER_REGISTRY = 'ethanyadan'
        DOCKER_IMAGE_NAME = 'details-app'
    }

    stages {
        stage('Clone Project') {
            steps {
                git branch: 'master', // Adjust branch as needed
                   credentialsId: 'gitlab-credentials', // Secure credentials for GitLab access
                   url: 'https://github.com/zero-pytagoras/details-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using Dockerfile (assuming it's in the project root)
                    sh 'docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub with secured credentials
                    docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                    // Push the image to Docker Hub
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest'
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after job execution
            cleanWs()
        }
    }
}